classdef viconEstimator < robotics.ros.Message
    %viconEstimator MATLAB implementation of ros_vrpn_client/viconEstimator
    %   This class was automatically generated by
    %   robotics.ros.msg.internal.gen.MessageClassGenerator.
    
    %   Copyright 2016 The MathWorks, Inc.
    
    %#ok<*INUSD>
    
    properties (Constant)
        MessageType = 'ros_vrpn_client/viconEstimator' % The ROS message type
    end
    
    properties (Constant, Hidden)
        MD5Checksum = '9bff16271dd3f76b4bc0f80575324260' % The MD5 Checksum of the message definition
    end
    
    properties (Access = protected)
        JavaMessage % The Java message object
    end
    
    properties (Constant, Access = protected)
        GeometryMsgsQuaternionClass = robotics.ros.msg.internal.MessageFactory.getClassForType('geometry_msgs/Quaternion') % Dispatch to MATLAB class for message type geometry_msgs/Quaternion
        GeometryMsgsVector3Class = robotics.ros.msg.internal.MessageFactory.getClassForType('geometry_msgs/Vector3') % Dispatch to MATLAB class for message type geometry_msgs/Vector3
        StdMsgsBoolClass = robotics.ros.msg.internal.MessageFactory.getClassForType('std_msgs/Bool') % Dispatch to MATLAB class for message type std_msgs/Bool
        StdMsgsHeaderClass = robotics.ros.msg.internal.MessageFactory.getClassForType('std_msgs/Header') % Dispatch to MATLAB class for message type std_msgs/Header
    end
    
    properties (Dependent)
        Header
        PosMeasured
        PosOld
        VelOld
        PosEst
        VelEst
        QuatMeasured
        QuatOld
        OmegaOld
        QuatEst
        OmegaEst
        OutlierFlag
        MeasurementFlipFlag
        QZZ1
        QZB
    end
    
    properties (Access = protected)
        Cache = struct('Header', [], 'PosMeasured', [], 'PosOld', [], 'VelOld', [], 'PosEst', [], 'VelEst', [], 'QuatMeasured', [], 'QuatOld', [], 'OmegaOld', [], 'QuatEst', [], 'OmegaEst', [], 'OutlierFlag', [], 'MeasurementFlipFlag', [], 'QZZ1', [], 'QZB', []) % The cache for fast data access
    end
    
    properties (Constant, Hidden)
        PropertyList = {'Header', 'MeasurementFlipFlag', 'OmegaEst', 'OmegaOld', 'OutlierFlag', 'PosEst', 'PosMeasured', 'PosOld', 'QZB', 'QZZ1', 'QuatEst', 'QuatMeasured', 'QuatOld', 'VelEst', 'VelOld'} % List of non-constant message properties
        ROSPropertyList = {'header', 'measurement_flip_flag', 'omega_est', 'omega_old', 'outlier_flag', 'pos_est', 'pos_measured', 'pos_old', 'q_Z_B', 'q_Z_Z1', 'quat_est', 'quat_measured', 'quat_old', 'vel_est', 'vel_old'} % List of non-constant ROS message properties
    end
    
    methods
        function obj = viconEstimator(msg)
            %viconEstimator Construct the message object viconEstimator
            import com.mathworks.toolbox.robotics.ros.message.MessageInfo;
            
            % Support default constructor
            if nargin == 0
                obj.JavaMessage = obj.createNewJavaMessage;
                return;
            end
            
            % Construct appropriate empty array
            if isempty(msg)
                obj = obj.empty(0,1);
                return;
            end
            
            % Make scalar construction fast
            if isscalar(msg)
                % Check for correct input class
                if ~MessageInfo.compareTypes(msg(1), obj.MessageType)
                    error(message('robotics:ros:message:NoTypeMatch', obj.MessageType, ...
                        char(MessageInfo.getType(msg(1))) ));
                end
                obj.JavaMessage = msg(1);
                return;
            end
            
            % Check that this is a vector of scalar messages. Since this
            % is an object array, use arrayfun to verify.
            if ~all(arrayfun(@isscalar, msg))
                error(message('robotics:ros:message:MessageArraySizeError'));
            end
            
            % Check that all messages in the array have the correct type
            if ~all(arrayfun(@(x) MessageInfo.compareTypes(x, obj.MessageType), msg))
                error(message('robotics:ros:message:NoTypeMatchArray', obj.MessageType));
            end
            
            % Construct array of objects if necessary
            objType = class(obj);
            for i = 1:length(msg)
                obj(i,1) = feval(objType, msg(i)); %#ok<AGROW>
            end
        end
        
        function header = get.Header(obj)
            %get.Header Get the value for property Header
            if isempty(obj.Cache.Header)
                obj.Cache.Header = feval(obj.StdMsgsHeaderClass, obj.JavaMessage.getHeader);
            end
            header = obj.Cache.Header;
        end
        
        function set.Header(obj, header)
            %set.Header Set the value for property Header
            validateattributes(header, {obj.StdMsgsHeaderClass}, {'nonempty', 'scalar'}, 'viconEstimator', 'header');
            
            obj.JavaMessage.setHeader(header.getJavaObject);
            
            % Update cache if necessary
            if ~isempty(obj.Cache.Header)
                obj.Cache.Header.setJavaObject(header.getJavaObject);
            end
        end
        
        function posmeasured = get.PosMeasured(obj)
            %get.PosMeasured Get the value for property PosMeasured
            if isempty(obj.Cache.PosMeasured)
                obj.Cache.PosMeasured = feval(obj.GeometryMsgsVector3Class, obj.JavaMessage.getPosMeasured);
            end
            posmeasured = obj.Cache.PosMeasured;
        end
        
        function set.PosMeasured(obj, posmeasured)
            %set.PosMeasured Set the value for property PosMeasured
            validateattributes(posmeasured, {obj.GeometryMsgsVector3Class}, {'nonempty', 'scalar'}, 'viconEstimator', 'posmeasured');
            
            obj.JavaMessage.setPosMeasured(posmeasured.getJavaObject);
            
            % Update cache if necessary
            if ~isempty(obj.Cache.PosMeasured)
                obj.Cache.PosMeasured.setJavaObject(posmeasured.getJavaObject);
            end
        end
        
        function posold = get.PosOld(obj)
            %get.PosOld Get the value for property PosOld
            if isempty(obj.Cache.PosOld)
                obj.Cache.PosOld = feval(obj.GeometryMsgsVector3Class, obj.JavaMessage.getPosOld);
            end
            posold = obj.Cache.PosOld;
        end
        
        function set.PosOld(obj, posold)
            %set.PosOld Set the value for property PosOld
            validateattributes(posold, {obj.GeometryMsgsVector3Class}, {'nonempty', 'scalar'}, 'viconEstimator', 'posold');
            
            obj.JavaMessage.setPosOld(posold.getJavaObject);
            
            % Update cache if necessary
            if ~isempty(obj.Cache.PosOld)
                obj.Cache.PosOld.setJavaObject(posold.getJavaObject);
            end
        end
        
        function velold = get.VelOld(obj)
            %get.VelOld Get the value for property VelOld
            if isempty(obj.Cache.VelOld)
                obj.Cache.VelOld = feval(obj.GeometryMsgsVector3Class, obj.JavaMessage.getVelOld);
            end
            velold = obj.Cache.VelOld;
        end
        
        function set.VelOld(obj, velold)
            %set.VelOld Set the value for property VelOld
            validateattributes(velold, {obj.GeometryMsgsVector3Class}, {'nonempty', 'scalar'}, 'viconEstimator', 'velold');
            
            obj.JavaMessage.setVelOld(velold.getJavaObject);
            
            % Update cache if necessary
            if ~isempty(obj.Cache.VelOld)
                obj.Cache.VelOld.setJavaObject(velold.getJavaObject);
            end
        end
        
        function posest = get.PosEst(obj)
            %get.PosEst Get the value for property PosEst
            if isempty(obj.Cache.PosEst)
                obj.Cache.PosEst = feval(obj.GeometryMsgsVector3Class, obj.JavaMessage.getPosEst);
            end
            posest = obj.Cache.PosEst;
        end
        
        function set.PosEst(obj, posest)
            %set.PosEst Set the value for property PosEst
            validateattributes(posest, {obj.GeometryMsgsVector3Class}, {'nonempty', 'scalar'}, 'viconEstimator', 'posest');
            
            obj.JavaMessage.setPosEst(posest.getJavaObject);
            
            % Update cache if necessary
            if ~isempty(obj.Cache.PosEst)
                obj.Cache.PosEst.setJavaObject(posest.getJavaObject);
            end
        end
        
        function velest = get.VelEst(obj)
            %get.VelEst Get the value for property VelEst
            if isempty(obj.Cache.VelEst)
                obj.Cache.VelEst = feval(obj.GeometryMsgsVector3Class, obj.JavaMessage.getVelEst);
            end
            velest = obj.Cache.VelEst;
        end
        
        function set.VelEst(obj, velest)
            %set.VelEst Set the value for property VelEst
            validateattributes(velest, {obj.GeometryMsgsVector3Class}, {'nonempty', 'scalar'}, 'viconEstimator', 'velest');
            
            obj.JavaMessage.setVelEst(velest.getJavaObject);
            
            % Update cache if necessary
            if ~isempty(obj.Cache.VelEst)
                obj.Cache.VelEst.setJavaObject(velest.getJavaObject);
            end
        end
        
        function quatmeasured = get.QuatMeasured(obj)
            %get.QuatMeasured Get the value for property QuatMeasured
            if isempty(obj.Cache.QuatMeasured)
                obj.Cache.QuatMeasured = feval(obj.GeometryMsgsQuaternionClass, obj.JavaMessage.getQuatMeasured);
            end
            quatmeasured = obj.Cache.QuatMeasured;
        end
        
        function set.QuatMeasured(obj, quatmeasured)
            %set.QuatMeasured Set the value for property QuatMeasured
            validateattributes(quatmeasured, {obj.GeometryMsgsQuaternionClass}, {'nonempty', 'scalar'}, 'viconEstimator', 'quatmeasured');
            
            obj.JavaMessage.setQuatMeasured(quatmeasured.getJavaObject);
            
            % Update cache if necessary
            if ~isempty(obj.Cache.QuatMeasured)
                obj.Cache.QuatMeasured.setJavaObject(quatmeasured.getJavaObject);
            end
        end
        
        function quatold = get.QuatOld(obj)
            %get.QuatOld Get the value for property QuatOld
            if isempty(obj.Cache.QuatOld)
                obj.Cache.QuatOld = feval(obj.GeometryMsgsQuaternionClass, obj.JavaMessage.getQuatOld);
            end
            quatold = obj.Cache.QuatOld;
        end
        
        function set.QuatOld(obj, quatold)
            %set.QuatOld Set the value for property QuatOld
            validateattributes(quatold, {obj.GeometryMsgsQuaternionClass}, {'nonempty', 'scalar'}, 'viconEstimator', 'quatold');
            
            obj.JavaMessage.setQuatOld(quatold.getJavaObject);
            
            % Update cache if necessary
            if ~isempty(obj.Cache.QuatOld)
                obj.Cache.QuatOld.setJavaObject(quatold.getJavaObject);
            end
        end
        
        function omegaold = get.OmegaOld(obj)
            %get.OmegaOld Get the value for property OmegaOld
            if isempty(obj.Cache.OmegaOld)
                obj.Cache.OmegaOld = feval(obj.GeometryMsgsVector3Class, obj.JavaMessage.getOmegaOld);
            end
            omegaold = obj.Cache.OmegaOld;
        end
        
        function set.OmegaOld(obj, omegaold)
            %set.OmegaOld Set the value for property OmegaOld
            validateattributes(omegaold, {obj.GeometryMsgsVector3Class}, {'nonempty', 'scalar'}, 'viconEstimator', 'omegaold');
            
            obj.JavaMessage.setOmegaOld(omegaold.getJavaObject);
            
            % Update cache if necessary
            if ~isempty(obj.Cache.OmegaOld)
                obj.Cache.OmegaOld.setJavaObject(omegaold.getJavaObject);
            end
        end
        
        function quatest = get.QuatEst(obj)
            %get.QuatEst Get the value for property QuatEst
            if isempty(obj.Cache.QuatEst)
                obj.Cache.QuatEst = feval(obj.GeometryMsgsQuaternionClass, obj.JavaMessage.getQuatEst);
            end
            quatest = obj.Cache.QuatEst;
        end
        
        function set.QuatEst(obj, quatest)
            %set.QuatEst Set the value for property QuatEst
            validateattributes(quatest, {obj.GeometryMsgsQuaternionClass}, {'nonempty', 'scalar'}, 'viconEstimator', 'quatest');
            
            obj.JavaMessage.setQuatEst(quatest.getJavaObject);
            
            % Update cache if necessary
            if ~isempty(obj.Cache.QuatEst)
                obj.Cache.QuatEst.setJavaObject(quatest.getJavaObject);
            end
        end
        
        function omegaest = get.OmegaEst(obj)
            %get.OmegaEst Get the value for property OmegaEst
            if isempty(obj.Cache.OmegaEst)
                obj.Cache.OmegaEst = feval(obj.GeometryMsgsVector3Class, obj.JavaMessage.getOmegaEst);
            end
            omegaest = obj.Cache.OmegaEst;
        end
        
        function set.OmegaEst(obj, omegaest)
            %set.OmegaEst Set the value for property OmegaEst
            validateattributes(omegaest, {obj.GeometryMsgsVector3Class}, {'nonempty', 'scalar'}, 'viconEstimator', 'omegaest');
            
            obj.JavaMessage.setOmegaEst(omegaest.getJavaObject);
            
            % Update cache if necessary
            if ~isempty(obj.Cache.OmegaEst)
                obj.Cache.OmegaEst.setJavaObject(omegaest.getJavaObject);
            end
        end
        
        function outlierflag = get.OutlierFlag(obj)
            %get.OutlierFlag Get the value for property OutlierFlag
            if isempty(obj.Cache.OutlierFlag)
                obj.Cache.OutlierFlag = feval(obj.StdMsgsBoolClass, obj.JavaMessage.getOutlierFlag);
            end
            outlierflag = obj.Cache.OutlierFlag;
        end
        
        function set.OutlierFlag(obj, outlierflag)
            %set.OutlierFlag Set the value for property OutlierFlag
            validateattributes(outlierflag, {obj.StdMsgsBoolClass}, {'nonempty', 'scalar'}, 'viconEstimator', 'outlierflag');
            
            obj.JavaMessage.setOutlierFlag(outlierflag.getJavaObject);
            
            % Update cache if necessary
            if ~isempty(obj.Cache.OutlierFlag)
                obj.Cache.OutlierFlag.setJavaObject(outlierflag.getJavaObject);
            end
        end
        
        function measurementflipflag = get.MeasurementFlipFlag(obj)
            %get.MeasurementFlipFlag Get the value for property MeasurementFlipFlag
            if isempty(obj.Cache.MeasurementFlipFlag)
                obj.Cache.MeasurementFlipFlag = feval(obj.StdMsgsBoolClass, obj.JavaMessage.getMeasurementFlipFlag);
            end
            measurementflipflag = obj.Cache.MeasurementFlipFlag;
        end
        
        function set.MeasurementFlipFlag(obj, measurementflipflag)
            %set.MeasurementFlipFlag Set the value for property MeasurementFlipFlag
            validateattributes(measurementflipflag, {obj.StdMsgsBoolClass}, {'nonempty', 'scalar'}, 'viconEstimator', 'measurementflipflag');
            
            obj.JavaMessage.setMeasurementFlipFlag(measurementflipflag.getJavaObject);
            
            % Update cache if necessary
            if ~isempty(obj.Cache.MeasurementFlipFlag)
                obj.Cache.MeasurementFlipFlag.setJavaObject(measurementflipflag.getJavaObject);
            end
        end
        
        function qzz1 = get.QZZ1(obj)
            %get.QZZ1 Get the value for property QZZ1
            if isempty(obj.Cache.QZZ1)
                obj.Cache.QZZ1 = feval(obj.GeometryMsgsQuaternionClass, obj.JavaMessage.getQZZ1);
            end
            qzz1 = obj.Cache.QZZ1;
        end
        
        function set.QZZ1(obj, qzz1)
            %set.QZZ1 Set the value for property QZZ1
            validateattributes(qzz1, {obj.GeometryMsgsQuaternionClass}, {'nonempty', 'scalar'}, 'viconEstimator', 'qzz1');
            
            obj.JavaMessage.setQZZ1(qzz1.getJavaObject);
            
            % Update cache if necessary
            if ~isempty(obj.Cache.QZZ1)
                obj.Cache.QZZ1.setJavaObject(qzz1.getJavaObject);
            end
        end
        
        function qzb = get.QZB(obj)
            %get.QZB Get the value for property QZB
            if isempty(obj.Cache.QZB)
                obj.Cache.QZB = feval(obj.GeometryMsgsQuaternionClass, obj.JavaMessage.getQZB);
            end
            qzb = obj.Cache.QZB;
        end
        
        function set.QZB(obj, qzb)
            %set.QZB Set the value for property QZB
            validateattributes(qzb, {obj.GeometryMsgsQuaternionClass}, {'nonempty', 'scalar'}, 'viconEstimator', 'qzb');
            
            obj.JavaMessage.setQZB(qzb.getJavaObject);
            
            % Update cache if necessary
            if ~isempty(obj.Cache.QZB)
                obj.Cache.QZB.setJavaObject(qzb.getJavaObject);
            end
        end
    end
    
    methods (Access = protected)
        function resetCache(obj)
            %resetCache Resets any cached properties
            obj.Cache.Header = [];
            obj.Cache.PosMeasured = [];
            obj.Cache.PosOld = [];
            obj.Cache.VelOld = [];
            obj.Cache.PosEst = [];
            obj.Cache.VelEst = [];
            obj.Cache.QuatMeasured = [];
            obj.Cache.QuatOld = [];
            obj.Cache.OmegaOld = [];
            obj.Cache.QuatEst = [];
            obj.Cache.OmegaEst = [];
            obj.Cache.OutlierFlag = [];
            obj.Cache.MeasurementFlipFlag = [];
            obj.Cache.QZZ1 = [];
            obj.Cache.QZB = [];
        end
        
        function cpObj = copyElement(obj)
            %copyElement Implements deep copy behavior for message
            
            % Call default copy method for shallow copy
            cpObj = copyElement@robotics.ros.Message(obj);
            
            % Clear any existing cached properties
            cpObj.resetCache;
            
            % Create a new Java message object
            cpObj.JavaMessage = obj.createNewJavaMessage;
            
            % Recursively copy compound properties
            cpObj.Header = copy(obj.Header);
            cpObj.PosMeasured = copy(obj.PosMeasured);
            cpObj.PosOld = copy(obj.PosOld);
            cpObj.VelOld = copy(obj.VelOld);
            cpObj.PosEst = copy(obj.PosEst);
            cpObj.VelEst = copy(obj.VelEst);
            cpObj.QuatMeasured = copy(obj.QuatMeasured);
            cpObj.QuatOld = copy(obj.QuatOld);
            cpObj.OmegaOld = copy(obj.OmegaOld);
            cpObj.QuatEst = copy(obj.QuatEst);
            cpObj.OmegaEst = copy(obj.OmegaEst);
            cpObj.OutlierFlag = copy(obj.OutlierFlag);
            cpObj.MeasurementFlipFlag = copy(obj.MeasurementFlipFlag);
            cpObj.QZZ1 = copy(obj.QZZ1);
            cpObj.QZB = copy(obj.QZB);
        end
        
        function reload(obj, strObj)
            %reload Called by loadobj to assign properties
            obj.Header = feval([obj.StdMsgsHeaderClass '.loadobj'], strObj.Header);
            obj.PosMeasured = feval([obj.GeometryMsgsVector3Class '.loadobj'], strObj.PosMeasured);
            obj.PosOld = feval([obj.GeometryMsgsVector3Class '.loadobj'], strObj.PosOld);
            obj.VelOld = feval([obj.GeometryMsgsVector3Class '.loadobj'], strObj.VelOld);
            obj.PosEst = feval([obj.GeometryMsgsVector3Class '.loadobj'], strObj.PosEst);
            obj.VelEst = feval([obj.GeometryMsgsVector3Class '.loadobj'], strObj.VelEst);
            obj.QuatMeasured = feval([obj.GeometryMsgsQuaternionClass '.loadobj'], strObj.QuatMeasured);
            obj.QuatOld = feval([obj.GeometryMsgsQuaternionClass '.loadobj'], strObj.QuatOld);
            obj.OmegaOld = feval([obj.GeometryMsgsVector3Class '.loadobj'], strObj.OmegaOld);
            obj.QuatEst = feval([obj.GeometryMsgsQuaternionClass '.loadobj'], strObj.QuatEst);
            obj.OmegaEst = feval([obj.GeometryMsgsVector3Class '.loadobj'], strObj.OmegaEst);
            obj.OutlierFlag = feval([obj.StdMsgsBoolClass '.loadobj'], strObj.OutlierFlag);
            obj.MeasurementFlipFlag = feval([obj.StdMsgsBoolClass '.loadobj'], strObj.MeasurementFlipFlag);
            obj.QZZ1 = feval([obj.GeometryMsgsQuaternionClass '.loadobj'], strObj.QZZ1);
            obj.QZB = feval([obj.GeometryMsgsQuaternionClass '.loadobj'], strObj.QZB);
        end
    end
    
    methods (Access = ?robotics.ros.Message)
        function strObj = saveobj(obj)
            %saveobj Implements saving of message to MAT file
            
            % Return an empty element if object array is empty
            if isempty(obj)
                strObj = struct.empty;
                return
            end
            
            strObj.Header = saveobj(obj.Header);
            strObj.PosMeasured = saveobj(obj.PosMeasured);
            strObj.PosOld = saveobj(obj.PosOld);
            strObj.VelOld = saveobj(obj.VelOld);
            strObj.PosEst = saveobj(obj.PosEst);
            strObj.VelEst = saveobj(obj.VelEst);
            strObj.QuatMeasured = saveobj(obj.QuatMeasured);
            strObj.QuatOld = saveobj(obj.QuatOld);
            strObj.OmegaOld = saveobj(obj.OmegaOld);
            strObj.QuatEst = saveobj(obj.QuatEst);
            strObj.OmegaEst = saveobj(obj.OmegaEst);
            strObj.OutlierFlag = saveobj(obj.OutlierFlag);
            strObj.MeasurementFlipFlag = saveobj(obj.MeasurementFlipFlag);
            strObj.QZZ1 = saveobj(obj.QZZ1);
            strObj.QZB = saveobj(obj.QZB);
        end
    end
    
    methods (Static, Access = {?matlab.unittest.TestCase, ?robotics.ros.Message})
        function obj = loadobj(strObj)
            %loadobj Implements loading of message from MAT file
            
            % Return an empty object array if the structure element is not defined
            if isempty(strObj)
                obj = robotics.ros.custom.msggen.ros_vrpn_client.viconEstimator.empty(0,1);
                return
            end
            
            % Create an empty message object
            obj = robotics.ros.custom.msggen.ros_vrpn_client.viconEstimator;
            obj.reload(strObj);
        end
    end
end
