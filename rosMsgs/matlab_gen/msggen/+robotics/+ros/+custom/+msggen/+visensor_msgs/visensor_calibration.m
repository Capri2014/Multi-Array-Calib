classdef visensor_calibration < robotics.ros.Message
    %visensor_calibration MATLAB implementation of visensor_msgs/visensor_calibration
    %   This class was automatically generated by
    %   robotics.ros.msg.internal.gen.MessageClassGenerator.
    
    %   Copyright 2016 The MathWorks, Inc.
    
    %#ok<*INUSD>
    
    properties (Constant)
        MessageType = 'visensor_msgs/visensor_calibration' % The ROS message type
    end
    
    properties (Constant, Hidden)
        MD5Checksum = '366280da37d3e712ceb3c6cd144d0494' % The MD5 Checksum of the message definition
    end
    
    properties (Access = protected)
        JavaMessage % The Java message object
    end
    
    properties (Constant, Access = protected)
        GeometryMsgsPoseClass = robotics.ros.msg.internal.MessageFactory.getClassForType('geometry_msgs/Pose') % Dispatch to MATLAB class for message type geometry_msgs/Pose
    end
    
    properties (Dependent)
        CamName
        TCI
        DistModel
        ProjectionModel
        ImageWidth
        ImageHeight
        DistCoeff
        ProjectionCoeff
        PrincipalPoint
        FocalLength
    end
    
    properties (Access = protected)
        Cache = struct('TCI', []) % The cache for fast data access
    end
    
    properties (Constant, Hidden)
        PropertyList = {'CamName', 'DistCoeff', 'DistModel', 'FocalLength', 'ImageHeight', 'ImageWidth', 'PrincipalPoint', 'ProjectionCoeff', 'ProjectionModel', 'TCI'} % List of non-constant message properties
        ROSPropertyList = {'cam_name', 'dist_coeff', 'dist_model', 'focal_length', 'image_height', 'image_width', 'principal_point', 'projection_coeff', 'projection_model', 'T_CI'} % List of non-constant ROS message properties
    end
    
    methods
        function obj = visensor_calibration(msg)
            %visensor_calibration Construct the message object visensor_calibration
            import com.mathworks.toolbox.robotics.ros.message.MessageInfo;
            
            % Support default constructor
            if nargin == 0
                obj.JavaMessage = obj.createNewJavaMessage;
                return;
            end
            
            % Construct appropriate empty array
            if isempty(msg)
                obj = obj.empty(0,1);
                return;
            end
            
            % Make scalar construction fast
            if isscalar(msg)
                % Check for correct input class
                if ~MessageInfo.compareTypes(msg(1), obj.MessageType)
                    error(message('robotics:ros:message:NoTypeMatch', obj.MessageType, ...
                        char(MessageInfo.getType(msg(1))) ));
                end
                obj.JavaMessage = msg(1);
                return;
            end
            
            % Check that this is a vector of scalar messages. Since this
            % is an object array, use arrayfun to verify.
            if ~all(arrayfun(@isscalar, msg))
                error(message('robotics:ros:message:MessageArraySizeError'));
            end
            
            % Check that all messages in the array have the correct type
            if ~all(arrayfun(@(x) MessageInfo.compareTypes(x, obj.MessageType), msg))
                error(message('robotics:ros:message:NoTypeMatchArray', obj.MessageType));
            end
            
            % Construct array of objects if necessary
            objType = class(obj);
            for i = 1:length(msg)
                obj(i,1) = feval(objType, msg(i)); %#ok<AGROW>
            end
        end
        
        function camname = get.CamName(obj)
            %get.CamName Get the value for property CamName
            camname = char(obj.JavaMessage.getCamName);
        end
        
        function set.CamName(obj, camname)
            %set.CamName Set the value for property CamName
            validateattributes(camname, {'char'}, {}, 'visensor_calibration', 'camname');
            
            obj.JavaMessage.setCamName(camname);
        end
        
        function tci = get.TCI(obj)
            %get.TCI Get the value for property TCI
            if isempty(obj.Cache.TCI)
                obj.Cache.TCI = feval(obj.GeometryMsgsPoseClass, obj.JavaMessage.getTCI);
            end
            tci = obj.Cache.TCI;
        end
        
        function set.TCI(obj, tci)
            %set.TCI Set the value for property TCI
            validateattributes(tci, {obj.GeometryMsgsPoseClass}, {'nonempty', 'scalar'}, 'visensor_calibration', 'tci');
            
            obj.JavaMessage.setTCI(tci.getJavaObject);
            
            % Update cache if necessary
            if ~isempty(obj.Cache.TCI)
                obj.Cache.TCI.setJavaObject(tci.getJavaObject);
            end
        end
        
        function distmodel = get.DistModel(obj)
            %get.DistModel Get the value for property DistModel
            distmodel = char(obj.JavaMessage.getDistModel);
        end
        
        function set.DistModel(obj, distmodel)
            %set.DistModel Set the value for property DistModel
            validateattributes(distmodel, {'char'}, {}, 'visensor_calibration', 'distmodel');
            
            obj.JavaMessage.setDistModel(distmodel);
        end
        
        function projectionmodel = get.ProjectionModel(obj)
            %get.ProjectionModel Get the value for property ProjectionModel
            projectionmodel = char(obj.JavaMessage.getProjectionModel);
        end
        
        function set.ProjectionModel(obj, projectionmodel)
            %set.ProjectionModel Set the value for property ProjectionModel
            validateattributes(projectionmodel, {'char'}, {}, 'visensor_calibration', 'projectionmodel');
            
            obj.JavaMessage.setProjectionModel(projectionmodel);
        end
        
        function imagewidth = get.ImageWidth(obj)
            %get.ImageWidth Get the value for property ImageWidth
            imagewidth = int32(obj.JavaMessage.getImageWidth);
        end
        
        function set.ImageWidth(obj, imagewidth)
            %set.ImageWidth Set the value for property ImageWidth
            validateattributes(imagewidth, {'numeric'}, {'nonempty', 'scalar'}, 'visensor_calibration', 'imagewidth');
            
            obj.JavaMessage.setImageWidth(imagewidth);
        end
        
        function imageheight = get.ImageHeight(obj)
            %get.ImageHeight Get the value for property ImageHeight
            imageheight = int32(obj.JavaMessage.getImageHeight);
        end
        
        function set.ImageHeight(obj, imageheight)
            %set.ImageHeight Set the value for property ImageHeight
            validateattributes(imageheight, {'numeric'}, {'nonempty', 'scalar'}, 'visensor_calibration', 'imageheight');
            
            obj.JavaMessage.setImageHeight(imageheight);
        end
        
        function distcoeff = get.DistCoeff(obj)
            %get.DistCoeff Get the value for property DistCoeff
            javaArray = obj.JavaMessage.getDistCoeff;
            array = obj.readJavaArray(javaArray, 'double');
            distcoeff = double(array);
        end
        
        function set.DistCoeff(obj, distcoeff)
            %set.DistCoeff Set the value for property DistCoeff
            if ~isvector(distcoeff) && isempty(distcoeff)
                % Allow empty [] input
                distcoeff = double.empty(0,1);
            end
            
            validateattributes(distcoeff, {'numeric'}, {'vector'}, 'visensor_calibration', 'distcoeff');
            
            javaArray = obj.JavaMessage.getDistCoeff;
            array = obj.writeJavaArray(distcoeff, javaArray, 'double');
            obj.JavaMessage.setDistCoeff(array);
        end
        
        function projectioncoeff = get.ProjectionCoeff(obj)
            %get.ProjectionCoeff Get the value for property ProjectionCoeff
            javaArray = obj.JavaMessage.getProjectionCoeff;
            array = obj.readJavaArray(javaArray, 'double');
            projectioncoeff = double(array);
        end
        
        function set.ProjectionCoeff(obj, projectioncoeff)
            %set.ProjectionCoeff Set the value for property ProjectionCoeff
            if ~isvector(projectioncoeff) && isempty(projectioncoeff)
                % Allow empty [] input
                projectioncoeff = double.empty(0,1);
            end
            
            validateattributes(projectioncoeff, {'numeric'}, {'vector'}, 'visensor_calibration', 'projectioncoeff');
            
            javaArray = obj.JavaMessage.getProjectionCoeff;
            array = obj.writeJavaArray(projectioncoeff, javaArray, 'double');
            obj.JavaMessage.setProjectionCoeff(array);
        end
        
        function principalpoint = get.PrincipalPoint(obj)
            %get.PrincipalPoint Get the value for property PrincipalPoint
            javaArray = obj.JavaMessage.getPrincipalPoint;
            array = obj.readJavaArray(javaArray, 'double');
            principalpoint = double(array);
        end
        
        function set.PrincipalPoint(obj, principalpoint)
            %set.PrincipalPoint Set the value for property PrincipalPoint
            if ~isvector(principalpoint) && isempty(principalpoint)
                % Allow empty [] input
                principalpoint = double.empty(0,1);
            end
            
            validateattributes(principalpoint, {'numeric'}, {'vector'}, 'visensor_calibration', 'principalpoint');
            
            javaArray = obj.JavaMessage.getPrincipalPoint;
            array = obj.writeJavaArray(principalpoint, javaArray, 'double');
            obj.JavaMessage.setPrincipalPoint(array);
        end
        
        function focallength = get.FocalLength(obj)
            %get.FocalLength Get the value for property FocalLength
            javaArray = obj.JavaMessage.getFocalLength;
            array = obj.readJavaArray(javaArray, 'double');
            focallength = double(array);
        end
        
        function set.FocalLength(obj, focallength)
            %set.FocalLength Set the value for property FocalLength
            if ~isvector(focallength) && isempty(focallength)
                % Allow empty [] input
                focallength = double.empty(0,1);
            end
            
            validateattributes(focallength, {'numeric'}, {'vector'}, 'visensor_calibration', 'focallength');
            
            javaArray = obj.JavaMessage.getFocalLength;
            array = obj.writeJavaArray(focallength, javaArray, 'double');
            obj.JavaMessage.setFocalLength(array);
        end
    end
    
    methods (Access = protected)
        function resetCache(obj)
            %resetCache Resets any cached properties
            obj.Cache.TCI = [];
        end
        
        function cpObj = copyElement(obj)
            %copyElement Implements deep copy behavior for message
            
            % Call default copy method for shallow copy
            cpObj = copyElement@robotics.ros.Message(obj);
            
            % Clear any existing cached properties
            cpObj.resetCache;
            
            % Create a new Java message object
            cpObj.JavaMessage = obj.createNewJavaMessage;
            
            % Iterate over all primitive properties
            cpObj.CamName = obj.CamName;
            cpObj.DistModel = obj.DistModel;
            cpObj.ProjectionModel = obj.ProjectionModel;
            cpObj.ImageWidth = obj.ImageWidth;
            cpObj.ImageHeight = obj.ImageHeight;
            cpObj.DistCoeff = obj.DistCoeff;
            cpObj.ProjectionCoeff = obj.ProjectionCoeff;
            cpObj.PrincipalPoint = obj.PrincipalPoint;
            cpObj.FocalLength = obj.FocalLength;
            
            % Recursively copy compound properties
            cpObj.TCI = copy(obj.TCI);
        end
        
        function reload(obj, strObj)
            %reload Called by loadobj to assign properties
            obj.CamName = strObj.CamName;
            obj.DistModel = strObj.DistModel;
            obj.ProjectionModel = strObj.ProjectionModel;
            obj.ImageWidth = strObj.ImageWidth;
            obj.ImageHeight = strObj.ImageHeight;
            obj.DistCoeff = strObj.DistCoeff;
            obj.ProjectionCoeff = strObj.ProjectionCoeff;
            obj.PrincipalPoint = strObj.PrincipalPoint;
            obj.FocalLength = strObj.FocalLength;
            obj.TCI = feval([obj.GeometryMsgsPoseClass '.loadobj'], strObj.TCI);
        end
    end
    
    methods (Access = ?robotics.ros.Message)
        function strObj = saveobj(obj)
            %saveobj Implements saving of message to MAT file
            
            % Return an empty element if object array is empty
            if isempty(obj)
                strObj = struct.empty;
                return
            end
            
            strObj.CamName = obj.CamName;
            strObj.DistModel = obj.DistModel;
            strObj.ProjectionModel = obj.ProjectionModel;
            strObj.ImageWidth = obj.ImageWidth;
            strObj.ImageHeight = obj.ImageHeight;
            strObj.DistCoeff = obj.DistCoeff;
            strObj.ProjectionCoeff = obj.ProjectionCoeff;
            strObj.PrincipalPoint = obj.PrincipalPoint;
            strObj.FocalLength = obj.FocalLength;
            strObj.TCI = saveobj(obj.TCI);
        end
    end
    
    methods (Static, Access = {?matlab.unittest.TestCase, ?robotics.ros.Message})
        function obj = loadobj(strObj)
            %loadobj Implements loading of message from MAT file
            
            % Return an empty object array if the structure element is not defined
            if isempty(strObj)
                obj = robotics.ros.custom.msggen.visensor_msgs.visensor_calibration.empty(0,1);
                return
            end
            
            % Create an empty message object
            obj = robotics.ros.custom.msggen.visensor_msgs.visensor_calibration;
            obj.reload(strObj);
        end
    end
end
