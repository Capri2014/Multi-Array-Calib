classdef visensor_calibration_serviceResponse < robotics.ros.Message
    %visensor_calibration_serviceResponse MATLAB implementation of visensor_msgs/visensor_calibration_serviceResponse
    %   This class was automatically generated by
    %   robotics.ros.msg.internal.gen.MessageClassGenerator.
    
    %   Copyright 2016 The MathWorks, Inc.
    
    %#ok<*INUSD>
    
    properties (Constant)
        MessageType = 'visensor_msgs/visensor_calibration_serviceResponse' % The ROS message type
    end
    
    properties (Constant, Hidden)
        MD5Checksum = '172ea0cf80705c02d60f268884151985' % The MD5 Checksum of the message definition
    end
    
    properties (Access = protected)
        JavaMessage % The Java message object
    end
    
    properties (Constant, Access = protected)
        VisensorMsgsVisensorCalibrationClass = robotics.ros.msg.internal.MessageFactory.getClassForType('visensor_msgs/visensor_calibration') % Dispatch to MATLAB class for message type visensor_msgs/visensor_calibration
    end
    
    properties (Dependent)
        Calibration
    end
    
    properties (Access = protected)
        Cache = struct('Calibration', []) % The cache for fast data access
    end
    
    properties (Constant, Hidden)
        PropertyList = {'Calibration'} % List of non-constant message properties
        ROSPropertyList = {'calibration'} % List of non-constant ROS message properties
    end
    
    methods
        function obj = visensor_calibration_serviceResponse(msg)
            %visensor_calibration_serviceResponse Construct the message object visensor_calibration_serviceResponse
            import com.mathworks.toolbox.robotics.ros.message.MessageInfo;
            
            % Support default constructor
            if nargin == 0
                obj.JavaMessage = obj.createNewJavaMessage;
                return;
            end
            
            % Construct appropriate empty array
            if isempty(msg)
                obj = obj.empty(0,1);
                return;
            end
            
            % Make scalar construction fast
            if isscalar(msg)
                % Check for correct input class
                if ~MessageInfo.compareTypes(msg(1), obj.MessageType)
                    error(message('robotics:ros:message:NoTypeMatch', obj.MessageType, ...
                        char(MessageInfo.getType(msg(1))) ));
                end
                obj.JavaMessage = msg(1);
                return;
            end
            
            % Check that this is a vector of scalar messages. Since this
            % is an object array, use arrayfun to verify.
            if ~all(arrayfun(@isscalar, msg))
                error(message('robotics:ros:message:MessageArraySizeError'));
            end
            
            % Check that all messages in the array have the correct type
            if ~all(arrayfun(@(x) MessageInfo.compareTypes(x, obj.MessageType), msg))
                error(message('robotics:ros:message:NoTypeMatchArray', obj.MessageType));
            end
            
            % Construct array of objects if necessary
            objType = class(obj);
            for i = 1:length(msg)
                obj(i,1) = feval(objType, msg(i)); %#ok<AGROW>
            end
        end
        
        function calibration = get.Calibration(obj)
            %get.Calibration Get the value for property Calibration
            if isempty(obj.Cache.Calibration)
                javaArray = obj.JavaMessage.getCalibration;
                array = obj.readJavaArray(javaArray, obj.VisensorMsgsVisensorCalibrationClass);
                obj.Cache.Calibration = feval(obj.VisensorMsgsVisensorCalibrationClass, array);
            end
            calibration = obj.Cache.Calibration;
        end
        
        function set.Calibration(obj, calibration)
            %set.Calibration Set the value for property Calibration
            if ~isvector(calibration) && isempty(calibration)
                % Allow empty [] input
                calibration = feval([obj.VisensorMsgsVisensorCalibrationClass '.empty'], 0, 1);
            end
            
            validateattributes(calibration, {obj.VisensorMsgsVisensorCalibrationClass}, {'vector'}, 'visensor_calibration_serviceResponse', 'calibration');
            
            javaArray = obj.JavaMessage.getCalibration;
            array = obj.writeJavaArray(calibration, javaArray, obj.VisensorMsgsVisensorCalibrationClass);
            obj.JavaMessage.setCalibration(array);
            
            % Update cache if necessary
            if ~isempty(obj.Cache.Calibration)
                obj.Cache.Calibration = [];
                obj.Cache.Calibration = obj.Calibration;
            end
        end
    end
    
    methods (Access = protected)
        function resetCache(obj)
            %resetCache Resets any cached properties
            obj.Cache.Calibration = [];
        end
        
        function cpObj = copyElement(obj)
            %copyElement Implements deep copy behavior for message
            
            % Call default copy method for shallow copy
            cpObj = copyElement@robotics.ros.Message(obj);
            
            % Clear any existing cached properties
            cpObj.resetCache;
            
            % Create a new Java message object
            cpObj.JavaMessage = obj.createNewJavaMessage;
            
            % Recursively copy compound properties
            cpObj.Calibration = copy(obj.Calibration);
        end
        
        function reload(obj, strObj)
            %reload Called by loadobj to assign properties
            CalibrationCell = arrayfun(@(x) feval([obj.VisensorMsgsVisensorCalibrationClass '.loadobj'], x), strObj.Calibration, 'UniformOutput', false);
            obj.Calibration = vertcat(CalibrationCell{:});
        end
    end
    
    methods (Access = ?robotics.ros.Message)
        function strObj = saveobj(obj)
            %saveobj Implements saving of message to MAT file
            
            % Return an empty element if object array is empty
            if isempty(obj)
                strObj = struct.empty;
                return
            end
            
            strObj.Calibration = arrayfun(@(x) saveobj(x), obj.Calibration);
        end
    end
    
    methods (Static, Access = {?matlab.unittest.TestCase, ?robotics.ros.Message})
        function obj = loadobj(strObj)
            %loadobj Implements loading of message from MAT file
            
            % Return an empty object array if the structure element is not defined
            if isempty(strObj)
                obj = robotics.ros.custom.msggen.visensor_msgs.visensor_calibration_serviceResponse.empty(0,1);
                return
            end
            
            % Create an empty message object
            obj = robotics.ros.custom.msggen.visensor_msgs.visensor_calibration_serviceResponse;
            obj.reload(strObj);
        end
    end
end
